module shifter (
    input a[16],
    input b[4],
    input alufn0,
    input alufn1,
    output out[16]
    
  ) {

  sig w[16]; sig x[16]; sig y[16];sig z[16];
  
  always {
    //case 00 = shift left
    //case 10 = shift left arithmetic dont need do since same as shift left    
    //case 01 = shift rihgt
    //case 11 = shift right arithmetic
    case(alufn0){
      b0: 
      case(alufn1){
        //00
          b0:
          //first shift 2^3 = 8 bits shift 
          case(b[3]){
              b0: w = a;
              b1: w = a<<8;
              default:w=a;
              }
        
          //Second shift 2^2 = 4 bits shift
          case(b[2]){
              b0: x = w;
              b1: x = w<<4;
              default:x=w;
              }
          
          //Third shift 2^1 = 2 bits shift
          case(b[1]){
              b0: y = x;
              b1: y = x<<2;
              default:y=x;
              }
          
          //Fourth shift 2^0 = 1 bit shift
          case(b[0]){
              b0: out = y;
              b1: out = y<<1;
              default:out=y;
              }
          }
        
      b1:
      case(alufn1){
        //01 - Shift Right
          b0:
          //first shift 2^3 = 8 bits shift 
          case(b[3]){
              b0: w = a;
              b1: w = a>>8;
              default:w=a;
              }
        
          //Second shift 2^2 = 4 bits shift
          case(b[2]){
              b0: x = w;
              b1: x = w>>4;                
              default:x=w;
              }
          
          //Third shift 2^1 = 2 bits shift
          case(b[1]){
              b0: y = x;
              b1: y = x>>2;
              default:y=x;
              }
          
          //Fourth shift 2^0 = 1 bit shift
          case(b[0]){
              b0: out = y;
              b1: out = y>>1;
              default:out=y;
              }
            
        //11 - Shift right arithmetic
          b1:
          //first shift 2^3 = 8 bits shift 
          case(b[3]){
              b0: w = a;
              b1: w = a>>>8;
              default:w=a;
              }
        
          //Second shift 2^2 = 4 bits shift
          case(b[2]){
              b0: x = w;
              b1: x = w>>>4;                
              default:x=w;
              }
          
          //Third shift 2^1 = 2 bits shift
          case(b[1]){
              b0: y = x;
              b1: y = x>>>2;
              default:y=x;
              }
          
          //Fourth shift 2^0 = 1 bit shift
          case(b[0]){
              b0: out = y;
              b1: out = y>>>1;
              default:out=y;
              }
              }
        }
    
      
    }
  }

