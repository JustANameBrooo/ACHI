module alu_tester (  // tester module to test the 16-bit ALU
    input clk,  // clock
    input rst,  // reset
    input button,
    input dip[16],
    output out[16],
    output out_segs[8]
  ) {
  // registers to store different input/output values
  dff inputA[16](#INIT(0), .clk(clk), .rst(rst));
  dff inputB[16](#INIT(0), .clk(clk), .rst(rst));
  dff alufn[6](#INIT(0), .clk(clk), .rst(rst));
  dff result[16](#INIT(0), .clk(clk), .rst(rst));
  dff segs[8](#INIT(0), .clk(clk), .rst(rst));
  
  // FSM to control the input/output workflow
  fsm control(.clk(clk), .rst(rst)) = {
    WAITA,
    WAITB,
    WAITALUFN,
    GETRESULT
  };
  
  alu aluunit;

  always {
    aluunit.a = inputA.q;
    aluunit.b = inputB.q;
    aluunit.alufn = alufn.q;

    case (control.q) {
      control.WAITA:
        result.d = dip;
        segs.d = b01110111;  // segs display "A" for input A
        if (button) {
          inputA.d = dip;
          control.d = control.WAITB;
        }
        else {
          control.d = control.WAITA;
        }
        
      control.WAITB:
        result.d = dip;
        segs.d = b01111100;  // segs display "b" for input B
        if (button) {
          inputB.d = dip;
          control.d = control.WAITALUFN;
        }
        else {
          control.d = control.WAITB;
        }
        
      control.WAITALUFN:
        result.d[15:6] = 0;
        result.d[5:0] = dip[5:0];
        segs.d = b01110001;  // segs display "F" for ALUFN
        if (button) {
          alufn.d = dip[5:0];
          control.d = control.GETRESULT;
        }
        else {
          control.d = control.WAITALUFN;
        }
        
      control.GETRESULT:
        result.d = aluunit.out;
        segs.d = b00111111;  // segs display "O" for Output
        if (button) {
          // reset all registers and go back to first state
          inputA.d = 0;
          inputB.d = 0;
          alufn.d = 0;
          result.d = 0;
          control.d = control.WAITA;
        }
        else {
          control.d = control.GETRESULT;
        }
    }
    
    out = result.q;
    out_segs = segs.q;
  }
}
